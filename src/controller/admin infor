          switch (Command.findCommand(input)) {
              case LOGIN: login(Command.getMatcher(input, Command.LOGIN));
                  break;
              case ALL_ITEMS: allItems(Command.getMatcher(input, Command.ALL_ITEMS));
                  break;
              case ITEMS_IN_STOCK: itemsInStock(Command.getMatcher(input, Command.ITEMS_IN_STOCK));
                  break;
              case OUT_OF_STOCK: outOfStock(Command.getMatcher(input, Command.OUT_OF_STOCK));
                  break;
              case LOGOUT: logout(Command.getMatcher(input, Command.LOGOUT));
                  break;
              case NEW_ORDERS: newOrders(Command.getMatcher(input, Command.NEW_ORDERS));
                  break;
              case CHECKOUT: checkout(Command.getMatcher(input, Command.CHECKOUT));
                  break;
              case HISTORY: history(Command.getMatcher(input, Command.HISTORY));
                  break;
              case NEW_ITEM: newItem(Command.getMatcher(input, Command.NEW_ITEM));
                  break;
              case REMOVE: remove(Command.getMatcher(input, Command.REMOVE));
                  break;
              case EDIT_NAME_COUNT: editNameCount(Command.getMatcher(input, Command.EDIT_NAME_COUNT));
                  break;
              case EDIT_NAME: editName(Command.getMatcher(input, Command.EDIT_NAME));
                  break;
              case EDIT_SP_BP_COUNT: editSPBPCount(Command.getMatcher(input, Command.EDIT_SP_BP_COUNT));
                  break;
              case CALCULATE_PROFIT: calculateProfit(Command.getMatcher(input, Command.CALCULATE_PROFIT));
                  break;
              case CALCULATE_ITEM_PROFIT: calculateItemProfit(Command.getMatcher(input, Command.CALCULATE_ITEM_PROFIT));
                  break;
              case SALES: sales(Command.getMatcher(input, Command.SALES));
                  break;
              case ITEM_SALES: itemSales(Command.getMatcher(input, Command.ITEM_SALES));
                  break;
              default: System.out.println("Command does not exist.");
          }
        Database.write();
        return false;
      }


   METHODS:

   private void login(Matcher matcher) {
        int ID = Integer.parseInt(matcher.group(1));
        if (Customer.findCustomer(ID) == null) {
            new Customer(ID);
            System.out.println("New customer - Welcome.");
        } else System.out.println("Welcome back.");
    }

    private void allItems(Matcher matcher) {
    }

    private void itemsInStock(Matcher matcher) {
    }

    private void outOfStock(Matcher matcher) {
    }

    private void logout(Matcher matcher) {
    }

    private void newOrders(Matcher matcher) {
    }

    private void checkout(Matcher matcher) {
    }

    private void history(Matcher matcher) {
    }

    private void newItem(Matcher matcher) {
    }

    private void remove(Matcher matcher) {
    }

    private void editNameCount(Matcher matcher) {
    }

    private void editName(Matcher matcher) {
    }

    private void editSPBPCount(Matcher matcher) {
    }

    private void calculateProfit(Matcher matcher) {
    }

    private void calculateItemProfit(Matcher matcher) {
    }

    private void sales(Matcher matcher) {
    }

    private void itemSales(Matcher matcher) {
    }